Program Drive_ode

  Use library

  Implicit None
  Real(rk), Parameter :: g=9.81_rk,l=0.5_rk 
  Real(rk), Parameter :: theta0=pi/9._rk,omega0=0._rk,t0=0._rk,dt=5.E-3_rk,tfin=20._rk,b=1._rk
  !unitÃ  di misure caratteristiche del sistema da studiare e passo per evitare errore numerico e finestra di osservazione (in seguito a studio periodo eventualmente). Quindi studio caratteristiche del sistema
  Real(rk) :: theta_e(2),T_small
  Type(ode_data) :: data

  T_small=2._rk*pi*Sqrt(l/g)
  Print *,' Period for small angle= ',T_small
  Allocate(data%y0(2),data%y(2))
  data%y0=[theta0,omega0]
  data%x0=t0
  data%dx=dt
  data%fun => pendulum
  data%dfun_t => pendulum_t
  data%dfun_y => pendulum_y
  theta_e=data%y0
  Open(1,file='ode_lin.dat')
  Write(1,*) 't eul exact'
  Write(*,'(E19.12,2(x,E19.12))') data%x0,theta_e(1),theta0*Cos(2._rk*pi*data%x0/T_small)
  Write(1,'(E19.12,2(x,E19.12))') data%x0,theta_e(1),theta0*Cos(2._rk*pi*data%x0/T_small)
  Do While (data%x0<=tfin)
     data%y0=theta_e
     If (taylor(data)/=0) Stop 'taylor failed'
     if (picard(data)/=0) Stop 'picard failed'
     theta_e=data%y
     data%x0=data%x0+data%dx
     Write(*,'(E19.12,2(x,E19.12))') data%x0,theta_e(1),theta0*Cos(2._rk*pi*data%x0/T_small)
     Write(1,'(E19.12,2(x,E19.12))') data%x0,theta_e(1),theta0*Cos(2._rk*pi*data%x0/T_small)
  EndDo
  Close(1)

Contains

  Function pendulum_lin(theta,t)
    Implicit None
    Real(rk), Intent(in) :: theta(1:),t
    Real(rk) :: pendulum_lin(1:Size(theta))

    pendulum_lin(1)=theta(2)
    pendulum_lin(2)=-g/l*theta(1)
  End Function pendulum_lin

  Function pendulum(theta,t)
    Implicit None
    Real(rk), Intent(in) :: theta(1:),t
    Real(rk) :: pendulum(1:Size(theta))

    pendulum(1)=theta(2)
    pendulum(2)=-g/l*Sin(theta(1))
  End Function pendulum

  Function pendulum_f(theta,t)
    Implicit None
    Real(rk), Intent(in) :: theta(1:),t
    Real(rk) :: pendulum_f(1:Size(theta))

    pendulum_f(1)=theta(2)
    pendulum_f(2)=-g/l*Sin(theta(1))-b*theta(2)+b*sin(t)
  End Function pendulum_f

    Function pendulum_t(theta,t)
    Implicit None
    Real(rk), Intent(in) :: theta(1:),t
    Real(rk) :: pendulum_t(1:Size(theta))

    pendulum_t(1)=0._rk
    pendulum_t(2)=0._rk
  End Function pendulum_t

  Function pendulum_y(theta,t)
    Implicit None
    Real(rk), Intent(in) :: theta(1:),t
    Real(rk) :: pendulum_y(1:Size(theta),1:Size(theta))

    pendulum_y(1,1)=0._rk
    pendulum_y(1,2)=1._rk
    pendulum_y(2,1)=-g/l*Cos(theta(1))
    pendulum_y(2,2)=0._rk
  End Function pendulum_y

End Program Drive_ode
