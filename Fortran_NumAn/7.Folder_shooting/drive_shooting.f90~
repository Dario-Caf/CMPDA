Program drive_shooting

  Use library

  Implicit None

  Type(ode_data) :: data
  Type(ode_para) :: para
  Integer :: i,max_i
  Real(rk) :: print_data(5)

  para%eps=1.E-6_rk
  para%max_steps=1000
  para%case='A'
  Allocate(data%y0(2),data%y1(2),data%y(2))
  data%y0=[0.5_rk,1._rk]
  data%x0=0._rk
  data%y1=[1._rk,0._rk]
  data%x1=1._rk
  data%dx=1.E-3_rk
  data%fun => fun

  If (shooting(data,para)/=0) Stop 'shooting failed'

  Open(1,file='shooting.dat')
  Write(1,*) 'x u du u_exa du_exa'
  max_i=Ceiling(Abs((data%x1-data%x0)/data%dx))+1
  Do i=1,max_i
     print_data=[data%x0,data%u(1,i),data%u(2,i),Cos(0.5_rk*pi*data%x0)+&
          2._rk*Sin(0.5_rk*pi*data%x0)-1._rk,-0.5_rk*pi*Sin(0.5_rk*pi*data%x0)+pi*Cos(0.5_rk*pi*data%x0)]
     Write(*,'(E19.12,4(x,E19.12))') print_data
     Write(1,'(E19.12,4(x,E19.12))') print_data
     data%x0=data%x0+data%dx
  EndDo
  Close(1)
  Print *,'secant steps: ',para%steps

Contains

  Function fun(y,x)
    Implicit None
    Real(rk), Intent(in) :: y(1:),x
    Real(rk) :: fun(1:Size(y))

    fun(1)=y(2)
    fun(2)=-0.25_rk*(pi**2)*(1._rk+y(1))
  End Function fun

  Function shooting(Data,para) Result (stat)
! Compute u(x0->x1)[=data%u(1,x0->x1)] and du(x0->x1)[=data%u(2,x0->x1)]
! with the shooting method (with secant and Runge-Kutta)
! for the three cases below
! para%case = 'A' known  u(x0)[=y0(1)] e  u(x1)[=y1(1)]
! para%case = 'B' known  u(x0)[=y0(1)] e du(x1)[=y1(2)]
! para%case = 'C' known du(x0)[=y0(2)] e du(x1)[=y1(2)]
! where (x1>x0 and dx>0) or  (x1<x0 and dx<0)
! stat = 0 success
! stat = 1 no zero between ini-10 and ini+10
! stat = 2 max_steps exceeded in secant
! Adolfo Avella
! ver:1.0 Salerno, 2013.05.13

    Implicit None
    Type(ode_data), Target :: Data
    Type(ode_para) :: para
    Integer(4) :: stat

    Real(rk) :: y0_(1:Size(Data%y0)),x0_
    Real(rk), Pointer :: var,com
    Real(rk) :: ini,exa,zero
    Integer(4) :: i,max_i

    max_i=Ceiling(Abs((Data%x1-Data%x0)/Data%dx))+1
    Allocate(Data%u(1:Size(Data%y0),1:max_i))

    y0_=Data%y0
    x0_=Data%x0

    Select Case(para%Case)
    Case('A')
       ini = Data%y0(2)
       var => Data%y0(2)
       exa = Data%y1(1)
       com => Data%y(1)
    Case('B')
       ini = Data%y0(2)
       var => Data%y0(2)
       exa = Data%y1(2)
       com => Data%y(2)
    Case('C')
       ini = Data%y0(1)
       var => Data%y0(1)
       exa = Data%y1(2)
       com => Data%y(2)
    End Select

    stat= fun_zero_bisezione(aux,ini,Data%dx,para%eps,para%eps,para%max_steps,zero,para%steps)
    If (stat==1) Then
       Print *,'No zero between:',ini-10,' and ',ini+10
       Return
    End If
    If (stat==2) Then
       Print *,'Exceeded max_steps in Secant'
       Return
    End If

    Data%y0=y0_
    Data%x0=x0_
    var=zero
    Data%u(:,1)=Data%y0
    Do i=2,max_i
       stat=Runge_Kutta(Data)
       Data%u(:,i)=Data%y
       Data%y0=Data%y
       Data%x0=Data%x0+Data%dx
    Enddo
    Data%y0=y0_
    Data%x0=x0_
    var=zero

  Contains

    Function aux(x)
      Implicit None
      Real(rk), Intent(in) :: x
      Real(rk) :: aux

      Data%y0=y0_
      Data%x0=x0_
      var=x       
      Do i=2,max_i
         stat=Runge_Kutta(Data)
         Data%y0=Data%y
         Data%x0=Data%x0+Data%dx
      Enddo
      aux=com-exa
    End Function aux

  End Function shooting
  

End Program drive_shooting
